#+TITLE: Emacs configuration file
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* TODO ensure that this file tangles on save

* TODO remove other emacs init files from dotfiles, and from git tracking.  Emacs isn't using them, it is writing to .emacs.d, not a link.  Push these changes.

* TODO on startup, check whether the dotfiles repo is out of date with origin master, add little instruction message for magit about how to pull them down and whether to restart.  Tricky because not starting in dotfiles directory

* TODO find out how tabs and spaces are handled, fix if necessary

* TODO check out Thing At Point Commands

* This file handles all emacs configuration.

- Emacs doesn't "know about" this file on its own.  Instead, the code blocks in this file "tangle" (write out) to ~.emacs.d/init.el~ which emacs can find.  (See the property attribute at the top of this file.)
- The ~init.el~ and other init files are handled by emacs so those files should not be edited by humans., or tracked by the git repo.

** After making a change to this file:

1. You can activate the change right now to test it.  To do this,  ~C-c C-c~ on the code block to evaluate it.  (Thus, a best practice is to keep code for stuff you'll work on as a unit  separated into its own block.)

2. Saving this document re-tangles the ~init.el~ file, so it will be ready to go next time.  This is set later in this config file.
   
3. Commit any changes to the git repository via magit.  Here is the quickest way:
   1. Open a status buffer with ~C-x g~
   2. Navigate to the file, Tab to unfurl and see changes, ~s~ to stage a file for commit.  (Staging is really only useful when your single update is split across multiple files, but do it anyway.)
   3. To commit all staged files use ~c~, type your message and ~C-c C-c~ to commit.
   4. Push to origin master with ~P~

You should use the magit step to track changes to any dotfiles, not just emacs.

** When  are out of date compared to the repo:

Fetch changes with ~F~ in a magit buffer.

** Organization of configuration steps in this file

There is no "correct" order for setting customizations in this file.  One user suggests:

    Add paths so emacs can find things

    Configure emacs-OS interactions

    Configure built-in emacs features

    Configure packages that extend/override emacs features (minibuffer, completion, tabs, etc.)

    Configure other packages

    Never load themes, I have never had good luck with them in init/configuration and I load mine manually.


* Package management

This is par for the emacs course but a bit of a mess.

#+begin_src emacs-lisp

  ; Load local file "package.el" to enable package mgmt functions
  (require 'package)

  ; Change package.el 'archives' variable to add additional repositories
  (setq package-archives '(
         ("melpa" . "https://melpa.org/packages/")
         ("gnu" . "https://elpa.gnu.org/packages/")
         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
         ))

  ; Tell package.el to load packages in its load list
  (package-initialize)

  ; Only update list of available packages if the list doesn't exist (new install)
  (unless package-archive-contents ; evals to TRUE if list exists
    package-refresh-contents)
  
  ; Current problem: if you installed emacs a while ago, then try to install a package,
  ; use-package will "fail to install" because the list is outdated.  You can run
  ; "M-x package-refresh-contents" manually if you see this error message.
  ; In the long term, moving to straight.el might be the way to fix this.

  ;; Bootstrap use-package, a package that changes the way that packages
  ;; are specified and loaded, and enables lazy loading
  (unless (package-installed-p 'use-package) ; check if it is installed
    (package-refresh-contents)               ; call this fxn to update manually
    (package-install 'use-package))          ; install if missing
  (require 'use-package)                     ; load use-package
  (setq use-package-always-ensure t)         ; installs missing pkgs

#+end_src

* General Emacs UI

Simplify the emacs UI

#+begin_src emacs-lisp

    (setq inhibit-startup-screen t)       ; startup-screen = startup-message = splash-screen
    (tool-bar-mode -1)                    ; turn off the graphical buttons
    (menu-bar-mode -1)                    ; turn off the menu bar at the top
    (scroll-bar-mode -1)                  ; turn off the right-hand scrollbar
    (tooltip-mode -1)                     ; don't use tooltips on mouseover
    (set-fringe-mode 10)                  ; (default 8 px) adds a little space in r and l fringes
    (setq help-at-pt-display-when-idle t) ; shows tooltips in minibuffer
    (add-to-list 'initial-frame-alist
                 '(fullscreen . maximized)) ; start in big window

#+end_src

** Fonts and icons

This section needs to precede Org, since Org invokes these fonts.

Note: on a new install you'll need to run the following interactively in a lisp environment or else some fonts won't be installed:
M-x all-the-icons-install-fonts
(use-package all-the-icons)

#+begin_src emacs-lisp

  (use-package all-the-icons)
  (set-face-attribute 'default nil :font "inconsolata" :height 200)     ; default font
  (set-face-attribute 'fixed-pitch nil :font "inconsolata" :height 200) ; default fixed-width font
  (set-face-attribute 'variable-pitch nil :font "Palatino" :height 200) ; default non-fixed-width

#+end_src

** Theme

 Other good themes include "misterioso"

I like doom-tomorrow-day for a light screen.  There is also a doom-tomorrow-night but the comments are quite dim.

#+begin_src emacs-lisp

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tomorrow-day t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

*** TODO add dark-light toggle

** Mode line

I am currently just using the Doom default.  This requires all-the-icons I believe.  At the moment I don't know what all the icons even mean.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; Display column number in mode line.
  (setq-default column-number-mode t)

#+end_src

** Other global settings

#+begin_src emacs-lisp

  ;; Automatically update buffers if file content on the disk has changed.
  (setq global-auto-revert-mode t)

  ;; matching pairs of brackets/parens/etc. are colored the same
  ;; essential for elisp, I think
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Line numbers

*** TODO : suppress lns in dired buffers

#+begin_src emacs-lisp

  ;; (setq display-line-numbers-type 'relative)
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; disable line numbers for some modes
  ;; change modes as necessary
  (dolist (mode '(
                shell-mode-hook
               ;; term-mode-hook
                org-mode-hook
                eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src

** Dired configuration

Great commands needing a binding:
- I need a keybind for preview file: dired-display-file
- Another great one: from any file, open the containing folder in dired, with the current file selected: dired-jump (C-x C-j by default)
- Another one!  Navigating up & down is as you expect; right and left should open the file and go up one level, respectively.  I.e. left is dired-up-directory and right is dired-find-file

#+begin_src emacs-lisp

  (use-package dired
      :ensure nil ; it's already installed on all emacsen
      :commands (dired dired-jump)
      :custom ((dired-listing-switches "-algo")) ;-al is std. skip user and group
      :bind (("C-x C-j" . dired-jump)) ; technically unnecessary since it's the default
      )

#+end_src

* General Emacs behavior from external packages

The unfill package provides the reverse of the fill commands to convert hard-wrapped lines to long lines.  Provides:
- M-x unfill-region
- M-x unfill-paragraph
- M-x unfill-toggle

#+begin_src emacs-lisp

    (use-package unfill
      :ensure t)

#+end_src

#+RESULTS:

* Org mode

** Unsorted

#+begin_src emacs-lisp
  ;; -------------------- Org mode ----------------------------

  (defun nb/org-mode-setup ()
    (org-indent-mode)         ; indents with virtual space, hides leading stars
    (variable-pitch-mode 1)   ; a sans-serif variable pitch font (but use code below)
    (auto-fill-mode 0)        ; turn off automatic line breaks
    (visual-line-mode 1)      ; work with wrapped lines on the screen
    (org-fragtog-mode 1)      ; turn on rendering of latex math snippets
    (lambda () (plist-put org-format-latex-options :scale 1.8))
    )

  ; Editable inline LaTeX snippets in org
  (use-package org-fragtog)

  (use-package org
    :hook (org-mode . nb/org-mode-setup)
    :config
    (setq org-ellipsis "  â–¾")
    (setq org-agenda-files '("~/Documents/ToDo/Tasks.org")) ; not using this but why not
    )

  ;; (use-package org-bullets
  ;;  :after org
  ;;  :hook (org-mode . org-bullets-mode)
  ;;  :custom
  ;;  (org-bullets-bullets-list '("*" "!" "*" "*" "*" "*" "*")))


  ;; If/when you use a variable-pitch font, make sure you still have reasonable settings
  ;; for code blocks, tables, etc.
  ;; Look for these individually with M-x describe-face then org- (tab) to see all
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch)) ; will cause error unless indent mode on??
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Use visual-fill-mode to center text in buffer with padding at edges
  (defun nb/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . nb/org-mode-visual-fill))


  ;; Org behavior
  ;;(add-hook 'org-mode-hook 'org-fragtog-mode)
  ;;(add-hook 'org-mode-hook (lambda () (plist-put org-format-latex-options :scale 1.8)))
  (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (emacs-lisp . t)
      (R . t)
      (python . t)
      (maxima . t)
      (latex . t)
      ))

  ;; Syntax highlight in #+BEGIN_SRC blocks
  (setq org-src-fontify-natively t)
  ;; Disable the prompt when running code in org
  (setq org-confirm-babel-evaluate nil)
  ;; Fix an incompatibility between the ob-async and ob-ipython packages
  ;; (setq ob-async-no-async-languages-alist '("ipython"))

  ;; Org quick expansions to insert code blocks
  ;; Use by typing < then the prefix below then tab
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("R" . "src R"))

#+end_src

** Auto-generate init.el

Our goal is that every time this file is edited and saved, we will automatically run org-babel-tangle to regenerate our init.el file.  However, if we have multiple org buffers open, we don't want to run it when we save those buffers - we just want it for this buffer.

*** TODO try to replace this code with buffer-local variables?

#+begin_src emacs-lisp

    ;; Thanks to David Wilson at System Crafters for this function
    (defun nb/org-babel-tangle-config ()
      ;; First check to make sure that we're editing this config file
      (when (string-equal (buffer-file-name)
                          (expand-file-name "~/dotfiles/emacs/.emacs.d/emacs-config.org"))
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))
  ;; Org startup hook adds an after-save hook
    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook 'nb/org-babel-tangle-config)))

  "/Users/nbader/dotfiles/emacs/.emacs.d/emacs-config.org"

#+end_src

** Babel languages

#+begin_src emacs-lisp
  
  (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (emacs-lisp . t)
      (R . t)
      (python . t)
      (maxima . t)
      (latex . t)
      ))

#+end_src

* Development

** Languages

*** Language server protocol

LSP is protocol for providing  information about a variety of programming languages in the form of external libraries (servers) for each language.  The idea is that emacs can use LSP to get language-specific information from the server which it can then use to provide a better interface for that language.

Before using a new language, you have to install the LSP server for the language.  Go to the LSP-mode github page or the website https://microsoft.github.io/language-server find a maintainer and site for each language.  For example, the javascript LSP is installed via npm, the javascript package manager.

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)) 

#+end_src

*** Typescript (Javascript)

Typescript is basically Javascript but strongly typed, to help you catch errors early.  It outputs to regular Javascript.  This implementation is just me following along with using lsp mode for arbitrary languages in David Wilson's Emacs From Scratch series.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'" ; invokes mode for .ts files
    :hook (typescript-mode . lsp-deferred)
    :config (setq typescript-indent-level 2))
  
#+end_src

*** Company mode

Company mode is a completion framework that can link into LSP servers to provide completions for a particular language.

** Projectile

Projectile makes extra commands available if it detects you are opening a file from a folder with a git repo, and project file, etc.

Built-in alternative is project.el

Two big commands are
- C-p f projectile-find-file looks for a file in the current project using fuzzy matching
- C-p p projectile-switch-project switches to another project if you're working on more than one.  Below is set to open dired when you do this.  

#+begin_src emacs-lisp

  (use-package projectile
    ;;  :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired)
    )
  
#+end_src

** Magit

#+begin_src emacs-lisp

  ;; git interface
  ;; use C-x g to pull it up
  (use-package magit
    ;; :custom
    ;; (magit-display-buffer-function `magit-display-buffer-same-window-except-diff-v1)
    )

  ;;  :bind (("C-c g" . magit))

#+end_src

* R environment

#+begin_src emacs-lisp

  (use-package ess)

#+end_src

* LaTeX environment

#+begin_src emacs-lisp

  (use-package latex
    :ensure auctex
    :config
    (setq-default TeX-master nil))
  
#+end_src

* Python

#+begin_src emacs-lisp

  ;; Disable the warning message that appears when you start a python interpreter
  (setq python-shell-completion-native-enable nil)

#+end_src

* Shell stuff

#+begin_src emacs-lisp

  ; This package attempts to set emacs exec-path and PATH from the shell path
  ; Should work if your shell is found by executing (getenv "SHELL")
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x)) ; when window mgr is either mac, ns, or x
    :config
    (exec-path-from-shell-initialize))
  
#+end_src

* Completion framework

#+begin_src emacs-lisp
  ; -- Completion framework --

  ; IDO mode - the bare-bones system (works fine)
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)

  ;; vertico displays candidates in a vertical list in the minibuffer,
  ;; which is a little easier to read
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    )

  ;; savehist ("saved history") is a built-in package that puts your recently-selected files at the top of the list.
  (use-package savehist
    :init
    (savehist-mode)
    )

  ; orderless lets you enter space separated search terms for filtering candidates
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  ;; Marginalia displays annotations in the minibuffer
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init section is always executed.
    :init
    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package
    (marginalia-mode))

  ; ----------------------------- ;

  ;; helpful is a package that improves the help screens?
  ;; not sure how well it works with vertico and built-in

  ;; which-key displays possible subsequent keys after a prefix
  (use-package which-key
    :init (which-key-mode)
    :diminish (which-key-mode)
    :config (setq which-key-idle-delay 0.3)) ; displays after short delay

  ;; When searching using apropos in Emacs help, show all hits,
  ;; not just user-defined
  (setq apropos-do-all t)

#+end_src

* General keyboard interaction

#+begin_src emacs-lisp
    ;; -------------------- User-defined functions and code ------------------

      (defun nb/point-is-on-leading-symbol ()
        "Determine whether point is on a leading header, comment, or list item
      Return t if so; nil otherwise."
         (let ((start-pt (point)))
         (save-excursion
          (move-beginning-of-line nil)
          (and
           (looking-at (rx
            line-start
            (zero-or-more blank)
            (group-n 1 (or ; add html comments, C multiline
             (one-or-more "#")   ; R, Python comments, Markdown headers
             (one-or-more "%")   ; LaTeX comments
             (one-or-more ">")   ; Markdown/email blockquotes
             (one-or-more "*")   ; org headers, markdown lists
             (= 1 "\"\"\"")      ; Python multiline comments
             (= 1 "+")           ; markdown lists
             (= 1 "-")           ; markdown/org list items
             (seq (one-or-more digit) (= 1 ".")))) ; ordered list items (not working)
            (one-or-more blank)
            (one-or-more graphic)))
           (>= start-pt (match-beginning 1))
           (< start-pt (match-end 1))))))

      (defun nb/move-end-of-line (prefix)
        "Move point to end of line; if repeated, delete trailing whitespace.
      Moves point to the end of the line with universal PREFIX if not there already.
      If point is at the end of the line, remove trailing whitespace,
      moving point to last non-whitespace character.
      Thus C-e C-e replaces C-e M-/ in vanilla emacs."
        (interactive "^p") ; p accepts numeric prefix from C-u; ^ extends selection
        ;; First, 'move-end-of-line' (with numeric prefix) and check if point moved.
        ;; If not, it's already at end of line so run 'delete-horizontal-space'
        (let ((start-point (point)))
          (move-end-of-line prefix)
          (when (= start-point (point))
            (delete-horizontal-space))))

      (defun nb/move-beginning-of-line (prefix)
        "Toggle pt to line beginning, text after indentation/list element/comment.
      Toggles point among three locations: beginning of line (as in the default),
      the first non-whitespace character in the line (default M-m), and
      the first non-whitespace character after a leading symbol, such as a markdown
      list item, an org heading, a comment character, etc. Leading symbols are
      defined in a separate function, 'nb/point-is-on-leading-symbol.'"
        (interactive "^p") ; p accepts numeric prefix from C-u; ^ extends selection
        (setq prefix (or prefix 1)) ; either nil or 1 is set to 1
        ;; If there is numeric prefix (not nil or 1), move down n-1 lines
        (cond ((/= prefix 1) (move-beginning-of-line prefix))
          ;; If pt is at beginning of line on whitespace char, move to 1st non-ws
          ((and (= (current-column) 0) (looking-at "[[:blank:]]"))
            (back-to-indentation))
          ;; Else if pt is on comment/list/header char, move to text after char
          ((nb/point-is-on-leading-symbol)
            (progn (forward-word nil) (backward-word nil)))
          ;; Otherwise go to the beginning of the line
          (t (move-beginning-of-line nil))))

      ;; future: look into general.el to define all your keybindings with nice syntax
      ;; more importantly, this is the way to spacemacs like leader keys etc.

      ;; Wow, hydra is really great, allowing you to simplify "families" of keybinds

      ;; remap C-e and C-a to my functions
      (global-set-key (kbd "C-e") 'nb/move-end-of-line)
      (global-set-key (kbd "C-a") 'nb/move-beginning-of-line)

      ;; remap M-o (unbound) to other-window
      (global-set-key (kbd "M-o") 'other-window)

      ;; On Mac, make sure that command is meta
      (when (eq system-type 'darwin)
        (setq mac-command-key-is-meta t))
      ;  (setq mac-option-modifier 'meta
      ;	mac-command-modifier 'nil))
      ;	mac-option-modifier 'meta
      ;        mac-right-option-modifier 'nil
      ;	mac-command-modifier 'nil
      ;	mac-right-command-modifier 'meta))

      ; On Mac, command-h bypasses emacs to hide the window.  Prevent emacs from sending this
      ; command-tab still works as macos app switcher!
      (setq mac-pass-command-to-system nil)

      ;; - Interaction with system clipboard
      (setq-default
       ;; Kill and yank use the system clipboard
       select-enable-clipboard t
       ;; Kill and yank also uses the X primary selection, just in case
       select-enable-primary t
       ;; Save clipboard strings into kill ring before replacing them.  With this
       ;; off, if you copy something outside emacs, then kill in emacs, then the
       ;; external selection is gone.
       save-interprogram-paste-before-kill t
      )

#+end_src

* Emacs files and directories

This section is about basic housecleaning.

#+begin_src emacs-lisp

  ;; Have Customize write its customization settings to another file.
  ;; But do I need this anymore?
  (setq custom-file "~/.emacs.d/custom-file.el")
  (load custom-file)

  ;; Keep backup files (file~) out of my directories
  (setq backup-directory-alist
          '(("." . "~/.saves" )) ; Put all backups in .saves
        backup-by-copying t      ; don't mess up symlinks
        delete-old-versions t    ; don't let old versions pile up
        kept-new-versions 6      
        kept-old-versions 2
        version-control t)       ; use versioned backups
  
#+end_src

* Evil mode stuff, not currently used

#+begin_src emacs-lisp
;; ----------------- Evil mode stuff --------------------

  ;; ; Use Evil mode (vim emulator)
  ;; ;; load evil
  ;; (use-package evil
  ;;   :ensure t ; install the evil package if not installed
  ;;   :defer .1 ; load emacs before loading evil
  ;;   :init     ; run before loading package:
  ;;   (setq evil-want-keybinding nil)  ; required by evil-collection
  ;;   (setq evil-search-module 'evil-search)
  ;;   ;(setq evil-ex-complete-emacs-commands nil)
  ;;   (setq evil-vsplit-window-right t) ; like vi splitright
  ;;   (setq evil-split-window-below t) ; like vi splitbelow
  ;;   ;(setq evil-shift-round nil)
  ;;   ;(setq evil-want-C-u-scroll t)
  ;;   :config ;; run after loading package:
  ;;   (evil-mode)
  ;;   ;; example how to map a command in normal mode (called 'normal state' in evil)
  ;;   ;(define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
  ;;   )

  ;; ;; vim-like keybindings everywhere in emacs
  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :ensure t
  ;;   :config
  ;;   (evil-collection-init)
  ;;   )

  ;; ;; gc operator, like vim-commentary
  ;; (use-package evil-commentary
  ;;   :ensure t
  ;;   :bind (
  ;;     :map evil-normal-state-map("gc" . evil-commentary))
  ;;   )

#+end_src
